
@page "/event"
@using System.Security.Cryptography.X509Certificates
@using InvaMeetings.Web.Controllers
@using InvaMeetings.Web.Model
@inject IJSRuntime jsRuntime
@inject UserEventService userEventService
@inject EventController eventService

@attribute [Authorize]
<h1>Event List</h1>


<p>This component demonstrates data from Database.</p>

@if (eventList == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name:</th>
            <th>Address:</th>
            <th>Date:</th>
            <th>Description:</th>
            <th>Join:</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var eventItem in eventList)
        {
            <tr>
                <td>@eventItem.name</td>
                <td>@eventItem.address</td>
                <td>@eventItem.date</td>
                <td>@eventItem.description</td>
                <td><input type="button" class="btn btn-primary" @onclick="(() => addUserToEvent(eventItem))"  value="Join" /></td>        
            </tr>
        }
        </tbody>
    </table>
}
<div>
</div>

<AuthorizeView>
    <Authorized>
        @{
            var applicationUserId = context.User.AsApplicationUser().UserId;
            userEventObject.UserId = applicationUserId;
        }
        }
        
        @code {
            List<EventModel> eventList;
            EventModel eventObject = new EventModel();
            UserEventModel userEventObject = new UserEventModel();
            UserEventModel userEventModel = new UserEventModel();
            //Lägg till så sidan uppdateras 
            private async Task addUserToEvent(EventModel task)
            {
                
                userEventObject.ApplicationTime = DateTime.Now;
                eventList = await eventService.Get();
                eventObject = task;
                userEventObject.EventId = eventObject.EventId;
                userEventService.Add(userEventObject);


                Console.WriteLine("Detta är vad som skriv ut " + eventObject.EventId + userEventObject.UserId);
            }

        }
    </Authorized>
</AuthorizeView>

@code {
    protected override async Task OnInitializedAsync()
    {
        eventList = await eventService.Get();
    }
}