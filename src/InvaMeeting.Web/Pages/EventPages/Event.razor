
@page "/event"

@using InvaMeetings.Web.Controllers
@using InvaMeetings.Web.Model
@inject IJSRuntime jsRuntime
@inject UserEventService userEventService
@inject EventController eventService

@attribute [Authorize]
<h1>Event List</h1>

@if (eventList == null)
{
    <p><em>Loading...</em></p>
}

else
{

    <div class="container mt-3" style="float:left;">
        <div class="md-form mt-0" style="width: 200px; margin-bottom: 2%">
            <input class="form-control" 
                   type="text"
                   id="myInput"
                   onkeyup="myFunction()" placeholder="Search for event.." title="Type in a name">
        </div>
            
        <div class="table-responsive-sm">
            <table class="table table-striped" id="myTable">
                <thead>
                    <tr>
                        <th>Name:</th>
                        <th>Address:</th>
                        <th>Date:</th>
                        <th>Description:</th>
                        <th>Join:</th>
                    </tr>
                </thead>
                <tbody id="myTable">
                    @foreach (var eventItem in eventList)
                    {
                        <tr>

                            <td>@eventItem.name</td>
                            <td>@eventItem.address</td>
                            <td>@eventItem.date</td>
                            <td>@eventItem.description</td>
                            <td>
                                <input type="button"
                                       class="btn btn-primary" @onclick="@(() => addUserToEvent(eventItem))"
                                       value="Join" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

<AuthorizeView>
    <Authorized>



        @{
            var applicationUserId = context.User.AsApplicationUser().UserId;
            userEventObject.UserId = applicationUserId;
        }

        @code {
            [Parameter]
            public Action DataChanged { get; set; }

            List<EventModel> eventList;
            EventModel eventObject = new EventModel();
            UserEventModel userEventObject = new UserEventModel();

            protected override async Task OnInitializedAsync()
            {
                eventList = await eventService.Get();
            }

            private async Task addUserToEvent(EventModel task)
            {
                userEventObject.ApplicationTime = DateTime.Now;
                eventObject = task;
                userEventObject.EventId = eventObject.EventId;
                await userEventService.Add(userEventObject);
                DataChanged?.Invoke();
                eventList = await eventService.Get();

            }
        }
    </Authorized>
</AuthorizeView>
