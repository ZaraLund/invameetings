
@page "/eventpage"
@using InvaMeetings.Web
@using InvaMeetings.Web.Data
@inject IJSRuntime jsRuntime
@inject EventController eventService

@attribute [Authorize]
<h1>Event List</h1>

<p>This component demonstrates fetching data from Database.</p>
<div class="form-group">
    <input type="button" data-toggle="modal" data-target="#eventPopup" class="btn btn-success" value="Add Event" @onclick="(() => InitializeEventObject())" />

    <EventDetail EventObject=eventObject DataChanged="@DataChanged">

    </EventDetail>
</div>

@if (eventList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name:</th>
                <th>Address:</th>
                <th>Date:</th>
                <th>Description:</th>
                <th>Edit:</th>
                <th>Delete:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eventItem in eventList)
            {
                <tr>
                    <td>@eventItem.name</td>
                    <td>@eventItem.address</td>
                    <td>@eventItem.date</td>
                    <td>@eventItem.description</td>
                    <td><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(eventItem))" data-toggle="modal" data-target="#eventPopup" value="Edit" /></td>
                    <td><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(eventItem))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" /></td>

                </tr>
            }
        </tbody>
    </table>
}
<div>
</div>


<ConfirmDialog OnClick="@Delete" />

<EventDetail EventObject=eventObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</EventDetail>






@code {
    List<EventModel> eventList;
    EventModel eventObject = new EventModel();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        eventList = await eventService.Get();
    }

    private void InitializeEventObject()
    {
        eventObject = new EventModel();
        eventObject.date = DateTime.Now;
        customHeader = "Add New Task";
    }

    private async void DataChanged()
    {
        eventList = await eventService.Get();
        StateHasChanged();
    }

    private void PrepareForEdit(EventModel task)
    {
        customHeader = "Edit Task";
        eventObject = task;
    }

    private void PrepareForDelete(EventModel task)
    {
        eventObject = task;
    }

    private async Task Delete()
    {
        var task = await eventService.Delete(eventObject.ID);

        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        eventList = await eventService.Get();
        eventObject = new EventModel();
    }
}
